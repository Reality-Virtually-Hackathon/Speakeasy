Visit http://www.ivansapps.com/wordpress/?page_id=118 for better instructions on how to use this asset.
Currently tested working with Leap Motion Orion Core Assets 4.1.4 & Orion Hands Module v2.0.0

Installation
------------
1. Open your Unity project.
2. If you have previously installed the old Leap Motion V2 skeletal tracking asset, ensure it is COMPLETELY REMOVED. This includes the various Leap motion DLLs etc.
3. Ensure that the Orion version of the Leap Motion tracking software is installed on your computer https://developer.leapmotion.com/orion
4. Ensure the official Leap Motion Orion Unity assets package is added into your Unity project https://developer.leapmotion.com/unity
5. Ensure the official Leap Motion Orion Hands Module package is added into your Unity project https://developer.leapmotion.com/unity
5. Download and import the Avatar Hand Controller for Leap Motion from the asset store.
6. That’s it! The package will be installed into a LeapAvatarHands folder. You can check out a demo scene in the Scenes sub-folder.

Configuring your own avatar
---------------------------
Adding this solution onto a player avatar in your Unity scene is quite easy, although does require a fair bit of configuration for the avatar.

1. Set the update mode on the Animator component of your character to “Animate Physics”.
2. For desk mode: Add a child gameobject to your player gameobject (GameObject->Create Empty Child). The player gameobject must be a properly rigged character with 5 fingered and 3+ jointed hands. I did all my testing with characters generated by Mixamo Fuse, and then rigged with the Mixamo auto-rigger.
2. For VR mode: Add a child gameobject to your camera gameobject (GameObject->Create Empty Child).
3. For desk mode: Position this child gameobject where you want the virtual Leap controller to sit, generally speaking you will want this to be about 20-40cm out from the avatar’s belly button.
3. For VR mode: Position this child gameobject 0.1 z-units forwards of the Camera gameobject, so it sits a little ways in front of the avatar's face. Then ROTATE the object -90 on the x axis and 180 on the y axis, so that it is facing forwards in the same way that the leap motion itself would face forwards when mounted on a VR headset.
4. Add the IKOrionLeapHandController script and the LeapProvider script to this empty gameobject.
5. Go to the avatar’s left hand and add the RiggedHand script from the Leap Unity package to it. 
6. Set the handedness to Left.
7. Click the cog icon top right of the component, then select the "Setup Rigged Hand" drop-down menu option.
8. Repeat steps 5-7 for the right hand, replacing left for right.
8. Go back to the IKOrionLeapHandController gameobject and set the Avatar Left Hand and Avatar Right Hand fields to use the hands you just configured.
9. Go to the root node of the avatar and add the IKActioner script, and tell it which gameobject you put the IKLeapController onto.
10. Test your avatar by running the scene and placing your hands in front of the leap motion sensor.
11. You will often need to adjust the thumbs of your avatar to make them appear correctly - try setting the Model Palm Facing x parameter to -1 (for left hand) or 1 (for right hand) and z parameter to 0.
12. In some cases, other fingers may not have detected properly also. Experiment with the palm facing and finger pointing vectors to adjust to suit the avatar.

The IKActioner script passes the inverse kinematics pass from the animator component on the avatar up to the actual IKLeapHandController.

The IKLeapHandController is an extension of the provided LeapHandController, set up to work with avatar hands and inverse kinematics.

Using rigid hands
-----------------
So that your hands can interact with physical objects in game, I have included a RigidIKRoundHand_L and RigidIKRoundHand_R prefab which will work with my IK solution.
For desk mode simply add these as children of the IKOrionLeapHandController gameobject and update the physics left hand and physics right hand references in the IKOrionLeapHandController script.
For VR mode place these two gameobjects in root transform (straight into the scene, not as a child node of another transform). Then update the left physics hand and right physics hand references in the IKOrionLeapHandController script to point to them.
NOTE: Physics hands are a little inaccurate still, but can be improved by fine adjustments to the offset and wrist offset parameters in the RigidHands and RiggedHands components. The avatar hands are limited by the range of movement of the avatar's hands, whereas the physics hands are not. Consequently, it is difficult to get the physics hands and the real hands to sync up perfectly. The offset and palm width parameters of the RigidIKHands can be tweaked to improve accuracy, but it's still not perfect, particularly when your arms are at full stretch.

Making your own Animator
------------------------
It is important to note the two different layers I used in my example Animator, with IK Pass enabled on the base layer and blending set to override with a weight of 1.
Also, don't forget to set the Animator to Animate Physics! This tweaks the order of execution, allowing the Leap data to override the animation data.
If you make your own Animator and it's not working right, refer to the example to see how it's meant to be done.

Using Hand Position Data at Runtime
-----------------------------------
Unity has a very particular order of execution. If you attempt to reference the hand transform in the Update method you will find that the data is incorrect, it will be based on where the currently playing character animation thinks the hand should be, rather than the leap motion hand data. The Animator IK pass happens after this. 
As such, if you are trying to use the hand transform data at runtime, you should probably be doing that in LateUpdate(), after the Leap data and IK pass has occurred.

Using Room Scale
---------------------------
When doing room scale you must put the MatchRotation script on the Neck transform of your avatar. You must also detach your Camera from your avatar, and make it a child of an empty transform. The Leap Controller must still be a child of the camera.
When using the Teleporter script, place this on the Camera's parent transform. Set it's RayTransform (usually the camera), and set up your Ray Mask so it only works on Floor objects. For room scale you will also want to untick the Do Rotation box.
You can see an example in the VR mode scene.

